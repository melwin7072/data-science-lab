Program 11: Dataset: <Breast_Cancer.csv>
a) Conduct exploratory data analysis on the given dataset and report the 
details. 
b) Visualize the analysis results using 
(i) scatter plot (ii) histogram & (iii) box plot
c) Implement the k-NN classification algorithm using the dataset. Try with 
different k values and show the accuracy

#a) exploratory data analysis
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.datasets import load_breast_cancer
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn import metrics


Load the Breast Cancer dataset
data = load_breast_cancer()
df = pd.DataFrame(data.data, columns=data.feature_names)
df['target'] = data.target
print(df.head(5))
df.info()


print(df.isnull().sum()) # Check for missing values
print(df.describe()) # Summary statistics of the dataset
# Target class distribution (Benign = 1, Malignant = 0)
# Benign (1): Non-cancerous tumor Malignant (0): Cancerous tumor.
print(df['target'].value_counts())



#b) Visualization
# (i) Scatter plot
plt.figure(figsize=(8, 6))
sns.scatterplot(x='mean radius', y='mean texture', hue='target', data=df)
plt.title("Scatter plot of Mean Radius vs Mean Texture")
plt.show()


 (ii) Histogram
plt.figure(figsize=(8, 6))
df['mean radius'].hist(bins=30)
plt.title("Histogram of Mean Radius")
plt.xlabel("Mean Radius")
plt.ylabel("Frequency")
plt.show()

 (iii) Box plot
plt.figure(figsize=(8, 6))
sns.boxplot(x='target', y='mean radius', data=df)
plt.title("Box plot of Mean Radius grouped by Target")
plt.show()


c) Implementing k-NN Classification
# Splitting the dataset into training and testing sets
X = df.drop('target', axis=1) # Features
y = df['target'] # Target
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, 
random_state=42)
# Testing k-NN with different values of k
k_values = [3, 5, 7, 9]
for k in k_values:
knn = KNeighborsClassifier(n_neighbors=k)
knn.fit(X_train, y_train)
y_pred = knn.predict(X_test)
accuracy = metrics.accuracy_score(y_test, y_pred)# Calculate accuracy
print(f"Accuracy with k={k}: {accuracy:.4f}")





Program 12: Dataset: <Wine_Quality.csv>
a) Conduct exploratory data analysis on the given dataset and 
report the details.
b) Visualize the analysis results using (i) scatter plot (ii) histogram & 
(iii) box plot.
c) Implement the k-NN classification algorithm using the dataset. 
Try with different K values and show the accuracy.


# a) exploratory data analysis
import pandas as pd
# Load the Wine Quality dataset
df = pd.read_csv('/content/Wine_Quality.csv')
print(df.head()) # Check the first few rows
print(df.isnull().sum()) # Check for missing values
print(df.describe()) # Summary statistics of the dataset
# Target variable distribution (if the dataset contains quality classes)
print(df['quality'].value_counts())

b) Visualization
import matplotlib.pyplot as plt
import seaborn as sns
# (i) Scatter plot
plt.figure(figsize=(8, 6))
sns.scatterplot(x='alcohol', y='pH', hue='quality', data=df)
plt.title("Scatter plot of Alcohol vs pH")
plt.show()


(ii) Histogram
plt.figure(figsize=(8, 6))
df['alcohol'].hist(bins=30)
plt.title("Histogram of Alcohol")
plt.xlabel("Alcohol")
plt.ylabel("Frequency")
plt.show()


# Box plot
plt.figure(figsize=(8, 6))
sns.boxplot(x='quality', y='alcohol', data=df)
plt.title("Box plot of Alcohol grouped by Quality")
plt.show()


c) Implementing k-NN Classification
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score
df_cleaned = df.dropna()# Drop rows or columns with missing values (if any)
# Define features (X) and target (y)
X = df_cleaned.drop(['quality', 'type'], axis=1) # Exclude 'quality' and 'type' for features
y = df_cleaned['quality'] # 'quality' is the target variable
# Split the data into training and testing sets (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, 
random_state=42)
scaler = StandardScaler()# Standardize the features for better performance of k-NN
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)
k_values = [1, 3, 5, 7, 9, 11, 13, 15] 
for k in k_values:
knn = KNeighborsClassifier(n_neighbors=k)
knn.fit(X_train_scaled, y_train)
# Predict on the test set
y_pred = knn.predict(X_test_scaled)
# Calculate accuracy
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy with k={k}: {accuracy:.4f}")



k_values_input = input("Enter k values : ")# user to input k values from the console
# Convert the input string into a list of integers
k_values = [int (k.strip()) for k in k_values_input.split(',')]
for k in k_values:
knn = KNeighborsClassifier(n_neighbors=k)
knn.fit(X_train_scaled, y_train) 
y_pred = knn.predict(X_test_scaled) # Predict on the test set
accuracy = accuracy_score(y_test, y_pred) # Calculate accuracy
print(f"Accuracy with k={k}: {accuracy:.4f}")





